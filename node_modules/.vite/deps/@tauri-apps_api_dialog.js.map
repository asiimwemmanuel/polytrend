{
  "version": 3,
  "sources": ["../../@tauri-apps/api/tauri.js", "../../@tauri-apps/api/helpers/tauri.js", "../../@tauri-apps/api/dialog.js"],
  "sourcesContent": ["// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/** @ignore */\nfunction uid() {\n    return window.crypto.getRandomValues(new Uint32Array(1))[0];\n}\n/**\n * Transforms a callback function to a string identifier that can be passed to the backend.\n * The backend uses the identifier to `eval()` the callback.\n *\n * @return A unique identifier associated with the callback function.\n *\n * @since 1.0.0\n */\nfunction transformCallback(callback, once = false) {\n    const identifier = uid();\n    const prop = `_${identifier}`;\n    Object.defineProperty(window, prop, {\n        value: (result) => {\n            if (once) {\n                Reflect.deleteProperty(window, prop);\n            }\n            return callback?.(result);\n        },\n        writable: false,\n        configurable: true\n    });\n    return identifier;\n}\n/**\n * Sends a message to the backend.\n * @example\n * ```typescript\n * import { invoke } from '@tauri-apps/api/tauri';\n * await invoke('login', { user: 'tauri', password: 'poiwe3h4r5ip3yrhtew9ty' });\n * ```\n *\n * @param cmd The command name.\n * @param args The optional arguments to pass to the command.\n * @return A promise resolving or rejecting to the backend response.\n *\n * @since 1.0.0\n */\nasync function invoke(cmd, args = {}) {\n    return new Promise((resolve, reject) => {\n        const callback = transformCallback((e) => {\n            resolve(e);\n            Reflect.deleteProperty(window, `_${error}`);\n        }, true);\n        const error = transformCallback((e) => {\n            reject(e);\n            Reflect.deleteProperty(window, `_${callback}`);\n        }, true);\n        window.__TAURI_IPC__({\n            cmd,\n            callback,\n            error,\n            ...args\n        });\n    });\n}\n/**\n * Convert a device file path to an URL that can be loaded by the webview.\n * Note that `asset:` and `https://asset.localhost` must be added to [`tauri.security.csp`](https://tauri.app/v1/api/config/#securityconfig.csp) in `tauri.conf.json`.\n * Example CSP value: `\"csp\": \"default-src 'self'; img-src 'self' asset: https://asset.localhost\"` to use the asset protocol on image sources.\n *\n * Additionally, `asset` must be added to [`tauri.allowlist.protocol`](https://tauri.app/v1/api/config/#allowlistconfig.protocol)\n * in `tauri.conf.json` and its access scope must be defined on the `assetScope` array on the same `protocol` object.\n *\n * @param  filePath The file path.\n * @param  protocol The protocol to use. Defaults to `asset`. You only need to set this when using a custom protocol.\n * @example\n * ```typescript\n * import { appDataDir, join } from '@tauri-apps/api/path';\n * import { convertFileSrc } from '@tauri-apps/api/tauri';\n * const appDataDirPath = await appDataDir();\n * const filePath = await join(appDataDirPath, 'assets/video.mp4');\n * const assetUrl = convertFileSrc(filePath);\n *\n * const video = document.getElementById('my-video');\n * const source = document.createElement('source');\n * source.type = 'video/mp4';\n * source.src = assetUrl;\n * video.appendChild(source);\n * video.load();\n * ```\n *\n * @return the URL that can be used as source on the webview.\n *\n * @since 1.0.0\n */\nfunction convertFileSrc(filePath, protocol = 'asset') {\n    return window.__TAURI__.convertFileSrc(filePath, protocol);\n}\n\nexport { convertFileSrc, invoke, transformCallback };\n", "import { invoke } from '../tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/** @ignore */\nasync function invokeTauriCommand(command) {\n    return invoke('tauri', command);\n}\n\nexport { invokeTauriCommand };\n", "import { invokeTauriCommand } from './helpers/tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Native system dialogs for opening and saving files.\n *\n * This package is also accessible with `window.__TAURI__.dialog` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.dialog`](https://tauri.app/v1/api/config/#allowlistconfig.dialog) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"dialog\": {\n *         \"all\": true, // enable all dialog APIs\n *         \"ask\": true, // enable dialog ask API\n *         \"confirm\": true, // enable dialog confirm API\n *         \"message\": true, // enable dialog message API\n *         \"open\": true, // enable file open API\n *         \"save\": true // enable file save API\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n * @module\n */\n/**\n * Open a file/directory selection dialog.\n *\n * The selected paths are added to the filesystem and asset protocol allowlist scopes.\n * When security is more important than the easy of use of this API,\n * prefer writing a dedicated command instead.\n *\n * Note that the allowlist scope change is not persisted, so the values are cleared when the application is restarted.\n * You can save it to the filesystem using [tauri-plugin-persisted-scope](https://github.com/tauri-apps/plugins-workspace/tree/v1/plugins/persisted-scope).\n * @example\n * ```typescript\n * import { open } from '@tauri-apps/api/dialog';\n * // Open a selection dialog for image files\n * const selected = await open({\n *   multiple: true,\n *   filters: [{\n *     name: 'Image',\n *     extensions: ['png', 'jpeg']\n *   }]\n * });\n * if (Array.isArray(selected)) {\n *   // user selected multiple files\n * } else if (selected === null) {\n *   // user cancelled the selection\n * } else {\n *   // user selected a single file\n * }\n * ```\n *\n * @example\n * ```typescript\n * import { open } from '@tauri-apps/api/dialog';\n * import { appDir } from '@tauri-apps/api/path';\n * // Open a selection dialog for directories\n * const selected = await open({\n *   directory: true,\n *   multiple: true,\n *   defaultPath: await appDir(),\n * });\n * if (Array.isArray(selected)) {\n *   // user selected multiple directories\n * } else if (selected === null) {\n *   // user cancelled the selection\n * } else {\n *   // user selected a single directory\n * }\n * ```\n *\n * @returns A promise resolving to the selected path(s)\n *\n * @since 1.0.0\n */\nasync function open(options = {}) {\n    if (typeof options === 'object') {\n        Object.freeze(options);\n    }\n    return invokeTauriCommand({\n        __tauriModule: 'Dialog',\n        message: {\n            cmd: 'openDialog',\n            options\n        }\n    });\n}\n/**\n * Open a file/directory save dialog.\n *\n * The selected path is added to the filesystem and asset protocol allowlist scopes.\n * When security is more important than the easy of use of this API,\n * prefer writing a dedicated command instead.\n *\n * Note that the allowlist scope change is not persisted, so the values are cleared when the application is restarted.\n * You can save it to the filesystem using [tauri-plugin-persisted-scope](https://github.com/tauri-apps/plugins-workspace/tree/v1/plugins/persisted-scope).\n * @example\n * ```typescript\n * import { save } from '@tauri-apps/api/dialog';\n * const filePath = await save({\n *   filters: [{\n *     name: 'Image',\n *     extensions: ['png', 'jpeg']\n *   }]\n * });\n * ```\n *\n * @returns A promise resolving to the selected path.\n *\n * @since 1.0.0\n */\nasync function save(options = {}) {\n    if (typeof options === 'object') {\n        Object.freeze(options);\n    }\n    return invokeTauriCommand({\n        __tauriModule: 'Dialog',\n        message: {\n            cmd: 'saveDialog',\n            options\n        }\n    });\n}\n/**\n * Shows a message dialog with an `Ok` button.\n * @example\n * ```typescript\n * import { message } from '@tauri-apps/api/dialog';\n * await message('Tauri is awesome', 'Tauri');\n * await message('File not found', { title: 'Tauri', type: 'error' });\n * ```\n *\n * @param message The message to show.\n * @param options The dialog's options. If a string, it represents the dialog title.\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n *\n */\nasync function message(message, options) {\n    const opts = typeof options === 'string' ? { title: options } : options;\n    return invokeTauriCommand({\n        __tauriModule: 'Dialog',\n        message: {\n            cmd: 'messageDialog',\n            message: message.toString(),\n            title: opts?.title?.toString(),\n            type: opts?.type,\n            buttonLabel: opts?.okLabel?.toString()\n        }\n    });\n}\n/**\n * Shows a question dialog with `Yes` and `No` buttons.\n * @example\n * ```typescript\n * import { ask } from '@tauri-apps/api/dialog';\n * const yes = await ask('Are you sure?', 'Tauri');\n * const yes2 = await ask('This action cannot be reverted. Are you sure?', { title: 'Tauri', type: 'warning' });\n * ```\n *\n * @param message The message to show.\n * @param options The dialog's options. If a string, it represents the dialog title.\n *\n * @returns A promise resolving to a boolean indicating whether `Yes` was clicked or not.\n *\n * @since 1.0.0\n */\nasync function ask(message, options) {\n    const opts = typeof options === 'string' ? { title: options } : options;\n    return invokeTauriCommand({\n        __tauriModule: 'Dialog',\n        message: {\n            cmd: 'askDialog',\n            message: message.toString(),\n            title: opts?.title?.toString(),\n            type: opts?.type,\n            buttonLabels: [\n                opts?.okLabel?.toString() ?? 'Yes',\n                opts?.cancelLabel?.toString() ?? 'No'\n            ]\n        }\n    });\n}\n/**\n * Shows a question dialog with `Ok` and `Cancel` buttons.\n * @example\n * ```typescript\n * import { confirm } from '@tauri-apps/api/dialog';\n * const confirmed = await confirm('Are you sure?', 'Tauri');\n * const confirmed2 = await confirm('This action cannot be reverted. Are you sure?', { title: 'Tauri', type: 'warning' });\n * ```\n *\n * @param message The message to show.\n * @param options The dialog's options. If a string, it represents the dialog title.\n *\n * @returns A promise resolving to a boolean indicating whether `Ok` was clicked or not.\n *\n * @since 1.0.0\n */\nasync function confirm(message, options) {\n    const opts = typeof options === 'string' ? { title: options } : options;\n    return invokeTauriCommand({\n        __tauriModule: 'Dialog',\n        message: {\n            cmd: 'confirmDialog',\n            message: message.toString(),\n            title: opts?.title?.toString(),\n            type: opts?.type,\n            buttonLabels: [\n                opts?.okLabel?.toString() ?? 'Ok',\n                opts?.cancelLabel?.toString() ?? 'Cancel'\n            ]\n        }\n    });\n}\n\nexport { ask, confirm, message, open, save };\n"],
  "mappings": "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",
  "names": ["message"]
}
